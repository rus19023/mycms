from contextlib import nullcontext
import math
from fractions import Fraction

eq = '2y**2-15y+7'


def getcoefficients():
    a = int(input('enter coefficient A: '))
    b = int(input('enter coefficient B: '))
    c = int(input('enter coefficient C: '))
    return a, b, c


def factortrinomial(a, b, c):
    print('factortrinomial: ')
    print(' ')
    # get the product of a and c coefficients
    ac = a * c
    if ac < 0:
        acstart = -ac
    else:
        acstart = ac
    #print('ac: %s', str(ac))
    # find factors of ac that = c when added together
    # using numbers less than ac
    for i in range(-acstart, acstart + 1):
        # check for divisor not 0
        if i != 0:
            # calculate modulo
            mod = ac % i
            # if modulo = 0
            if mod == 0:
                #print('mod: %s', str(mod))
                #save factors as variables
                f1 = i
                f2 = int(ac / i)
                # print('f1: %s', str(f1))
                # print('f2: %s' + str(f2))
                # print(' ')
                # check for factors sum = c
                if f1 + f2 == b:
                    print('f1: ', str(f1))
                    print('f2: ' + str(f2))
                    print(' ')
                    break
        i += 1

def quadratic(A, B, C, ltr):
    print('quadratic equation: ')
    print(' ')
    print("y = {}x\u00b2 + {}x + {}".format(A, B, C))
    print(' ')
    bsquared = B * B
    print('bsquared: ', bsquared)
    fourAC = 4 * A * C
    print('fourAC: ', fourAC)

    qtop = bsquared - fourAC
    print('qtop: ', qtop)
    sum = (-B + math.sqrt((B * B) - (4 * A * C))) / (2 * A)
    diff = (-B - math.sqrt((B * B) - (4 * A * C))) / (2 * A)

    sqrttop = math.sqrt(qtop)
    print('sqrttop: ', sqrttop)
    qe_denom = 2 * A
    print('qe_denom: ', qe_denom)
    print(' ')

    sumtop = -B + sqrttop
    difftop = -B - sqrttop
    print('sumtop: ', sumtop)
    print('difftop: ', difftop)
    print(' ')

    factorsum = sumtop / qe_denom
    fractionsum = Fraction(factorsum)
    print("fractionsum: {}/{}".format(fractionsum.numerator, fractionsum.denominator))
    print('factorsum: ', int(factorsum))
    print(' ')
    factorsumtext = "{}/{}".format(sumtop, qe_denom)

    factordiff = difftop / qe_denom
    fractiondiff = Fraction(factordiff)
    print("fractiondiff: {}/{}".format(fractiondiff.numerator, fractiondiff.denominator))
    factordifftext = "{}/{}".format(int(factordiff), qe_denom)
    f1sign = getsign(factorsum, True)

    print('factordiff: ', int(factordiff))  #####
    print(' ')

    print('factordifftext: ', factordifftext)
    print('factorsumtext: ', factorsumtext)
    print(' ')

    f1 = "({}{}{})".format(ltr, f1sign, str(int(factorsum)))
    print('f1: ', f1)
    print(' ')

    f2gcd = math.gcd(int(difftop), qe_denom)
    print('f2gcd: ', f2gcd)

    f2num = int(difftop / f2gcd)
    print('f2num: ', f2num)

    f1num = int((qe_denom) / f2gcd)
    print('f1num: ', f1num)

    f2 = "({}{}{}{})".format(str(int(use_the_1(factorsum, True))), ltr, getsign(f2num, False), str(int(f2num)))
    print('f2: ', f2)
    print(' ')

    print('factors: ', f1, f2)
    print(' ')
    print("solve: x = {}/{} or ".format(str(-f2num), str(f1num)))

def getsign(num, isleading):
    if num < 0 and not isleading:
        return ''
    if num > 1 and isleading:
        return '+'
    if num == 1 and isleading:
        return ''
    else:
        return '+'

def use_the_1(num, isleading):
    return '' if num == 1 and isleading else 1

def complete_square(A, B):
    C = 1 / 2 * B
    C = C * C
    print(' ')
    print(' ')
    print("Complete square: ltr = {}".format(C))

def midpoint_line(x1, x2, y1, y2):
    x = int((x1 + x2)/2)
    print('x: ', x)
    y = int((y1 + y2)/2)
    print('y: ', y)
    print("({} + {}) / 2, ({} + {}) / 2".format(str(x1), str(x2), str(y1), str(y2)))
    print(' ')
    print("Midpoint line: ({},{})".format(x, y))


A = 1
B = -2
C = 0
L = 'x'

x1 = 4
y1 = -2
x2 = -8
y2 = 4


print(' ')
print(' ')
factortrinomial(A, B, C)
print(' ')
print(' ')
quadratic(A, B, C, L)
print(' ')
print(' ')
complete_square(A, B)
print(' ')
print(' ')
midpoint_line(x1, x2, y1, y2)
print(' ')
print(' ')
